name: "Deploy: Oxford.Reader.Service"
env:
  AWS_REGION: "us-east-2"
  ECR_REPOSITORY: oxfordreader                  # set this to your Amazon ECR repository name
  ECS_SERVICE: oxfordprocessor-service          # set this to your Amazon ECS service name
  ECS_CLUSTER: ecsoxfordreader                  # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: "${{ github.workspace }}/oxford-reader-task-definition.json"
  CONTAINER_NAME: AppContainerDefinition        # set this to the name of the container in the
                                                # containerDefinitions section of your task definition
  NUGET_CERT_REVOCATION_MODE: offline
  
on:
  pull_request:
    branches: [ "main" ]
    types: [ labeled ]
    paths:
      - "src/processor/**"

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: contains( github.event.pull_request.labels.*.name, 'processor')
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Short SHA
        id: get_short_sha
        shell: bash
        run: echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
      
      - name: Use Short SHA
        shell: bash
        run: echo "Short SHA is $SHORT_SHA"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        shell: pwsh
        working-directory: "${{ github.workspace }}/src/processor"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.SHORT_SHA }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          $imageName = "$($Env:ECR_REGISTRY)/$($Env:ECR_REPOSITORY):$($Env:IMAGE_TAG)"
          docker build -t $imageName .
          docker push $imageName
          echo "image=$imageName" >> $env:GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true